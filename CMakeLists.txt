# Using CMake 3.10 as minimum to support all platforms of interest
# https://github.com/mikke89/RmlUi/issues/198#issuecomment-1246957062
cmake_minimum_required(VERSION "3.10")

project("RmlUi"
	VERSION "6.0"
	DESCRIPTION "C++ user interface library based on the HTML and CSS standards"
	LANGUAGES "C" "CXX"
)

set(RMLUI_VERSION_RELEASE FALSE)

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
	set(RMLUI_IS_ROOT_PROJECT TRUE)
endif()

# Add lists of available options for those that support it
include("${PROJECT_SOURCE_DIR}/CMake/OptionsLists.cmake")

option(BUILD_SHARED_LIBS "CMake standard option. Choose whether to build shared RmlUi libraries." ON)

# Declare project-specific options. Naming conventions:
#   - Use "RMLUI_" prefix to make all options specific to this project easily identifiable.
#   - Do not include negations (such as "not" and "disable"), to avoid situations with double negation.
#   - Do not include a verb prefix (such as "enable" and "build"), as these are often superfluous.
option(RMLUI_SAMPLES "Build samples of the library." OFF)
set(RMLUI_SAMPLES_BACKEND "auto" CACHE STRING "Backend to use when building the RmlUi samples. Choose one from ./CMake/Backends.cmake.")
set_property(CACHE RMLUI_SAMPLES_BACKEND PROPERTY STRINGS ${RMLUI_AVAILABLE_SAMPLES_BACKENDS})
if(NOT RMLUI_SAMPLES_BACKEND IN_LIST RMLUI_AVAILABLE_SAMPLES_BACKENDS)
	message(FATAL_ERROR "The RmlUi backend '${RMLUI_SAMPLES_BACKEND}' specified in RMLUI_SAMPLES_BACKEND is not valid. Valid options: ${RMLUI_AVAILABLE_SAMPLES_BACKENDS}")
endif()

set(RMLUI_FONT_ENGINE "freetype" CACHE STRING "Font engine to build RmlUi with. If set to \"none\", RmlUi won't build with any of the included font engines and some samples might be disabled.")
set_property(CACHE RMLUI_FONT_ENGINE PROPERTY STRINGS ${RMLUI_AVAILABLE_FONT_ENGINES})
if(NOT RMLUI_FONT_ENGINE IN_LIST RMLUI_AVAILABLE_FONT_ENGINES)
	message(FATAL_ERROR "The RmlUi font engine '${RMLUI_FONT_ENGINE}' specified in RMLUI_FONT_ENGINE is not valid. Valid options: ${RMLUI_AVAILABLE_FONT_ENGINES}")
endif()
if(RMLUI_FONT_ENGINE STREQUAL "none")
	set(RMLUI_FONT_ENGINE_ENABLED FALSE)
else()
	set(RMLUI_FONT_ENGINE_ENABLED TRUE)
endif()

if(RMLUI_IS_ROOT_PROJECT)
	option(BUILD_TESTING "CMake standard option. Enable RmlUi testing projects." OFF)
	if(BUILD_TESTING)
		enable_testing()
		set(RMLUI_TESTS ON)
		set(RMLUI_VISUAL_TESTS_RML_DIRECTORIES "" CACHE PATH "Specify additional directories containing *.rml test documents for VisualTests. Separate multiple directories by comma.")
		set(RMLUI_VISUAL_TESTS_COMPARE_DIRECTORY "" CACHE PATH "Set the input directory for screenshot comparison performed by VisualTests.")
		set(RMLUI_VISUAL_TESTS_CAPTURE_DIRECTORY "" CACHE PATH "Set the output directory for screenshots generated by VisualTests.")
		if(WIN32 AND BUILD_SHARED_LIBS AND NOT CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS)
			message(FATAL_ERROR "The RmlUi testing framework cannot be built when using shared libraries with default visibility on Windows. "
				"Please disable either BUILD_SHARED_LIBS or BUILD_TESTING. Or alternatively, enable CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS.")
		endif()
	endif()
endif()

option(RMLUI_LUA_BINDINGS "Build Lua bindings." OFF)
if(RMLUI_LUA_BINDINGS)
	set(RMLUI_LUA_BINDINGS_LIBRARY "lua" CACHE STRING "Choose which library to use for lua bindings when enabled, either 'lua' or 'luajit'.")
	set_property(CACHE RMLUI_LUA_BINDINGS_LIBRARY PROPERTY STRINGS ${RMLUI_AVAILABLE_LUA_BINDINGS_LIBRARIES})
	if(NOT RMLUI_LUA_BINDINGS_LIBRARY IN_LIST RMLUI_AVAILABLE_LUA_BINDINGS_LIBRARIES)
		message(FATAL_ERROR "The RmlUi Lua binding library '${RMLUI_LUA_BINDINGS_LIBRARY}' specified in RMLUI_LUA_BINDINGS_LIBRARY is not valid. Valid options: ${RMLUI_AVAILABLE_LUA_BINDINGS_LIBRARIES}")
	endif()
endif()

option(RMLUI_LOTTIE_PLUGIN "Enable plugin for Lottie animations. Requires the rlottie library." OFF)
option(RMLUI_SVG_PLUGIN "Enable plugin for SVG images. Requires the lunasvg library." OFF)

option(RMLUI_MATRIX_ROW_MAJOR "Use row-major matrices. Column-major matrices are used by default." OFF)

option(RMLUI_CUSTOM_RTTI "Build RmlUi with a custom implementation of run-time type information (RTTI). When enabled, all usage of language RTTI features such as dynamic_cast will be disabled." OFF)

option(RMLUI_PRECOMPILED_HEADERS "Enable precompiled headers for RmlUi." ON)

# Add custom CMake modules path for external dependencies
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake/Modules")
list(APPEND CMAKE_PREFIX_PATH "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies")

set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_CXX_EXTENSIONS OFF)

include(GNUInstallDirs)

include("CMake/Dependencies.cmake")

include("CMake/RuntimeDependencies.cmake")
setup_runtime_output_directory()
setup_runtime_dependency_set_arg()

add_subdirectory("Source")

if(RMLUI_SAMPLES OR RMLUI_TESTS)
	set(RMLUI_SHELL ON)
endif()

if(RMLUI_SHELL)
	include("CMake/BackendsAutoSelection.cmake")
	include("CMake/BackendsDependencies.cmake")
	add_subdirectory("Backends")
endif()

add_subdirectory("Samples")

if(RMLUI_TESTS)
	add_subdirectory("Tests")
endif()

# Add an interface library to include all sub-libraries.
# RMLUI_CMAKE_MINIMUM_VERSION_RAISE_NOTICE:
# From CMake 3.13 we can place target_link_libraries in the same source as each sub-library is declared, see CMP0079.
add_library(rmlui INTERFACE)
add_library(RmlUi::RmlUi ALIAS rmlui)
target_link_libraries(rmlui INTERFACE rmlui_core rmlui_debugger)
if(RMLUI_LUA_BINDINGS)
	target_link_libraries(rmlui INTERFACE rmlui_lua)
endif()
set_target_properties(rmlui PROPERTIES EXPORT_NAME "RmlUi")
install(TARGETS rmlui EXPORT RmlUiTargets)

install(EXPORT RmlUiTargets
	DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/RmlUi"
	NAMESPACE RmlUi::
	FILE RmlUiTargets.cmake
)

include(CMakePackageConfigHelpers)

configure_file(
	"${CMAKE_CURRENT_SOURCE_DIR}/CMake/RmlUiConfig.cmake.in"
	"${CMAKE_CURRENT_BINARY_DIR}/install/RmlUiConfig.cmake"
	@ONLY
)

# RMLUI_CMAKE_MINIMUM_VERSION_RAISE_NOTICE:
# From CMake 3.11 use compatibility mode `SameMinorVersion`.
write_basic_package_version_file("${CMAKE_CURRENT_BINARY_DIR}/install/RmlUiConfigVersion.cmake"
	COMPATIBILITY ExactVersion
)
install(FILES
	"${CMAKE_CURRENT_BINARY_DIR}/install/RmlUiConfig.cmake"
	"${CMAKE_CURRENT_BINARY_DIR}/install/RmlUiConfigVersion.cmake"
	"${CMAKE_CURRENT_SOURCE_DIR}/CMake/Dependencies.cmake"
	DESTINATION
	"${CMAKE_INSTALL_LIBDIR}/cmake/RmlUi"
)

install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/CMake/Modules"
	DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/RmlUi"
)

if(RMLUI_IS_ROOT_PROJECT)
	# Export build targets, except if RmlUi is included from a parent project using `add_subdirectory`.
	export(EXPORT RmlUiTargets
		FILE "${CMAKE_CURRENT_BINARY_DIR}/RmlUiTargets.cmake"
		NAMESPACE RmlUi::
		FILE RmlUiTargets.cmake
	)
endif()

install_runtime_dependencies()
